import React, { useState } from 'react'
import {
	Container,
	Paper,
	Box,
	TextField,
	Button,
	Typography,
	Alert,
	CircularProgress,
	Divider,
} from '@mui/material'
import {
	Login,
	Visibility,
	VisibilityOff,
	Person,
	Lock,
} from '@mui/icons-material'
import { useNavigate } from 'react-router-dom'
import { Link } from 'react-router-dom'

const LoginPage: React.FC = () => {
	const navigate = useNavigate()
	const [formData, setFormData] = useState({
		username: '',
		password: '',
	})
	const [showPassword, setShowPassword] = useState(false)
	const [isLoading, setIsLoading] = useState(false)
	const [error, setError] = useState('')

	const demoAccounts = [
		{
			username: 'fisherman',
			password: 'fisherman',
			role: '–†—ã–±–∞–∫',
			description: '–í–≤–æ–¥ —É–ª–æ–≤–æ–≤ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏',
		},
		{
			username: 'admin',
			password: 'admin',
			role: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
			description: '–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–µ',
		},
	]

	const handleInputChange =
		(field: string) => (event: React.ChangeEvent<HTMLInputElement>) => {
			setFormData(prev => ({ ...prev, [field]: event.target.value }))
			if (error) setError('')
		}

	const handleSubmit = async (event: React.FormEvent) => {
		event.preventDefault()
		setIsLoading(true)
		setError('')

		try {
			// –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ API
			await new Promise(resolve => setTimeout(resolve, 1500))

			const account = demoAccounts.find(
				acc =>
					acc.username === formData.username &&
					acc.password === formData.password
			)

			if (account) {
				console.log('–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥:', account)
				// –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
				localStorage.setItem('user', JSON.stringify(account))
				navigate('/')
			} else {
				setError('–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å')
			}
		} catch {
			setError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å–∏—Å—Ç–µ–º—É')
		} finally {
			setIsLoading(false)
		}
	}

	const isFormValid = formData.username.trim() && formData.password.trim()

	return (
		<Container
			maxWidth='sm'
			sx={{
				minHeight: '100vh',
				display: 'flex',
				alignItems: 'center',
				justifyContent: 'center',
				py: 4,
			}}
		>
			<Paper
				elevation={8}
				sx={{
					width: '100%',
					p: 4,
					borderRadius: 3,
					background: 'linear-gradient(145deg, #ffffff 0%, #f8f9fa 100%)',
				}}
			>
				{/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
				<Box sx={{ textAlign: 'center', mb: 4 }}>
					<Typography
						variant='h3'
						component='h1'
						gutterBottom
						sx={{
							fontWeight: 'bold',
							background: 'linear-gradient(135deg, #1976d2 0%, #42a5f5 100%)',
							backgroundClip: 'text',
							WebkitBackgroundClip: 'text',
							color: 'transparent',
						}}
					>
						üé£ –†—ã–±–æ–ª–æ–≤–Ω—ã–π —É—á—ë—Ç
					</Typography>
					<Typography
						variant='h5'
						component='h2'
						gutterBottom
						sx={{ fontWeight: 'medium' }}
					>
						–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
					</Typography>
					<Typography variant='body2' color='text.secondary'>
						–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞
					</Typography>
				</Box>

				{error && (
					<Alert severity='error' sx={{ mb: 3 }}>
						{error}
					</Alert>
				)}

				{/* –§–æ—Ä–º–∞ –≤—Ö–æ–¥–∞ */}
				<Box component='form' onSubmit={handleSubmit}>
					<Box sx={{ display: 'flex', flexDirection: 'column', gap: 3 }}>
						{/* –ü–æ–ª–µ username */}
						<TextField
							label='–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
							value={formData.username}
							onChange={handleInputChange('username')}
							required
							fullWidth
							InputProps={{
								startAdornment: (
									<Person sx={{ color: 'text.secondary', mr: 1 }} />
								),
							}}
							placeholder='–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
						/>

						{/* –ü–æ–ª–µ password */}
						<TextField
							label='–ü–∞—Ä–æ–ª—å'
							type={showPassword ? 'text' : 'password'}
							value={formData.password}
							onChange={handleInputChange('password')}
							required
							fullWidth
							InputProps={{
								startAdornment: (
									<Lock sx={{ color: 'text.secondary', mr: 1 }} />
								),
								endAdornment: (
									<Button
										size='small'
										onClick={() => setShowPassword(!showPassword)}
										sx={{ minWidth: 'auto', p: 0.5 }}
									>
										{showPassword ? <VisibilityOff /> : <Visibility />}
									</Button>
								),
							}}
							placeholder='–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å'
						/>
					</Box>

					{/* –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞ */}
					<Button
						type='submit'
						variant='contained'
						fullWidth
						size='large'
						disabled={!isFormValid || isLoading}
						startIcon={isLoading ? <CircularProgress size={20} /> : <Login />}
						sx={{
							mt: 3,
							py: 1.5,
							fontSize: '1.1rem',
							fontWeight: 'bold',
						}}
					>
						{isLoading ? '–í—Ö–æ–¥...' : '–í–æ–π—Ç–∏'}
					</Button>
				</Box>

				<Divider sx={{ my: 4 }}>
					<Typography variant='body2' color='text.secondary'>
						–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞?
					</Typography>
				</Divider>

				{/* –°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é */}
				<Box sx={{ textAlign: 'center' }}>
					<Button component={Link} to='/register' variant='outlined' fullWidth>
						–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç
					</Button>
				</Box>
			</Paper>
		</Container>
	)
}

export default LoginPage
